library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("Region", "Continent", "Country", "State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$Region <- stringr::str_replace_all(df$Region, "[\]", "")
df$Continent<- stringr::str_replace_all(df$Continent, "[\]", "")
df$Country <- stringr::str_replace_all(df$Country, "[\]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
#idaho <- function(df){
#  rows <- data.frame()
#  for (i in seq(1,length(df$routes.id)))
#   {
#    rows <- data.frame()
#    if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#      #print(df[i,])
#      #rows[nrow(rows) + 1,] = df[i,])
#      #rbind(rows, df[i,])
#      rows %>% add_row(df[1,])
#    }
#  }
#  return(rows)
#}
idaho <- data.frame()
#for (i in seq(1,length(df$routes.id))){
#  if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#    #print(df[i,])
#    #rows[nrow(rows) + 1,] = df[i,])
#    rbind(idaho, df[i,])
#
#}}
idaho <- df %>%
filter(str_detect(routes.location, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("Region", "Continent", "Country", "State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$Region <- stringr::str_replace_all(df$Region, "[\]", "")
df$Continent<- stringr::str_replace_all(df$Continent, "[\]", "")
df$Country <- stringr::str_replace_all(df$Country, "[\]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
#idaho <- function(df){
#  rows <- data.frame()
#  for (i in seq(1,length(df$routes.id)))
#   {
#    rows <- data.frame()
#    if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#      #print(df[i,])
#      #rows[nrow(rows) + 1,] = df[i,])
#      #rbind(rows, df[i,])
#      rows %>% add_row(df[1,])
#    }
#  }
#  return(rows)
#}
idaho <- data.frame()
#for (i in seq(1,length(df$routes.id))){
#  if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#    #print(df[i,])
#    #rows[nrow(rows) + 1,] = df[i,])
#    rbind(idaho, df[i,])
#
#}}
idaho <- df %>%
filter(str_detect(routes.Region, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("Region", "Continent", "Country", "State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$Region <- stringr::str_replace_all(df$Region, "[\]", "")
df$Continent<- stringr::str_replace_all(df$Continent, "[\]", "")
df$Country <- stringr::str_replace_all(df$Country, "[\]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
#idaho <- function(df){
#  rows <- data.frame()
#  for (i in seq(1,length(df$routes.id)))
#   {
#    rows <- data.frame()
#    if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#      #print(df[i,])
#      #rows[nrow(rows) + 1,] = df[i,])
#      #rbind(rows, df[i,])
#      rows %>% add_row(df[1,])
#    }
#  }
#  return(rows)
#}
idaho <- data.frame()
#for (i in seq(1,length(df$routes.id))){
#  if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#    #print(df[i,])
#    #rows[nrow(rows) + 1,] = df[i,])
#    rbind(idaho, df[i,])
#
#}}
idaho <- df %>%
filter(str_detect(Region, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
#df$Region <- stringr::str_replace_all(df$State, "[\]", "")
#df$Country <- stringr::str_replace_all(df$Country, "[\]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
#idaho <- function(df){
#  rows <- data.frame()
#  for (i in seq(1,length(df$routes.id)))
#   {
#    rows <- data.frame()
#    if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#      #print(df[i,])
#      #rows[nrow(rows) + 1,] = df[i,])
#      #rbind(rows, df[i,])
#      rows %>% add_row(df[1,])
#    }
#  }
#  return(rows)
#}
idaho <- data.frame()
#for (i in seq(1,length(df$routes.id))){
#  if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#    #print(df[i,])
#    #rows[nrow(rows) + 1,] = df[i,])
#    rbind(idaho, df[i,])
#
#}}
idaho <- df %>%
filter(str_detect(Region, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
#df$Region <- stringr::str_replace_all(df$State, "[\]", "")
#df$Country <- stringr::str_replace_all(df$Country, "[\]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
#idaho <- function(df){
#  rows <- data.frame()
#  for (i in seq(1,length(df$routes.id)))
#   {
#    rows <- data.frame()
#    if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#      #print(df[i,])
#      #rows[nrow(rows) + 1,] = df[i,])
#      #rbind(rows, df[i,])
#      rows %>% add_row(df[1,])
#    }
#  }
#  return(rows)
#}
idaho <- data.frame()
#for (i in seq(1,length(df$routes.id))){
#  if (substring(df[i,]$routes.location, 4, 8) == "Idaho"){
#    #print(df[i,])
#    #rows[nrow(rows) + 1,] = df[i,])
#    rbind(idaho, df[i,])
#
#}}
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
#df$Region <- stringr::str_replace_all(df$State, "[\]", "")
#df$Country <- stringr::str_replace_all(df$Country, "[\]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
#}}
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
runApp()
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$State <- stringr::str_replace_all(df$State, "c(", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
## SUbsetting for ID
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
#sample_data <- df[grep("Idaho", df$routes.location),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
df$State
df$State <- stringr::str_replace_all(df$State, "c(", "")
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$State <- stringr::str_replace_all(df$State, 'c("\Idaho\"', "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
## SUbsetting for ID
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$State <- stringr::str_replace_all(df$State, 'c("\Idaho\"', "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
## SUbsetting for ID
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
df$routes.location <- unlist(strsplit(df$routes.location, split = ","))
df$routes.location <- unlist(strsplit(df$routes.location, split = ","))
df$routes.location
df$routes.location <- unlist(strsplit(df$routes.location, split = ","))
View(df$routes.location)
df$location <- df$routes.location(unlist(strsplit(df$routes.location, split = ",")))
df$location <- df$routes.location(strsplit(df$routes.location, split = ","))
df$location <- df$routes.location(sapply(strsplit(df$routes.location, split = ",")))
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
df$routes.location <- unlist(strsplit(df$routes.location, split = ","))
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$State <- stringr::str_replace_all(df$State, "[c(]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[)]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
## SUbsetting for ID
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$State <- stringr::str_replace_all(df$State, "[c(]", "")
df$State <- stringr::str_replace_all(df$State, "[\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[)]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
## SUbsetting for ID
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
library(stringr)
library(tidyverse)
df = read.csv('../data/RouteDataCleaned.csv', stringsAsFactors = F)
##  using the separate function from  the tidyr package to separate list of crag location details for leaflet
df <- tidyr::separate(data = df,
col = routes.location,
into = c("State", "Area", "Crag", "Wall"),
sep= ",",
remove = F)
## Removing \ and "" from these
df$State <- stringr::str_replace_all(df$State, "[c(]", "")
df$State <- stringr::str_replace_all(df$State, "[\\]", "")
df$Area <- stringr::str_replace_all(df$Area, "[\\]", "")
df$Crag <- stringr::str_replace_all(df$Crag, "[\\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[\\]", "")
df$Wall <- stringr::str_replace_all(df$Wall, "[)]", "")
## convert the str lat/lons to numeric
#df$route.latitude = as.numeric(df$route.latitude)vals
#df$route.longitude = as.numeric(df$route.longitude)
## .rds helps to save processing time
saveRDS(df, "../data/data.rds")
## SUbsetting for ID
## piping a filter using tidyverse; str_detect from stringr
idaho <- df %>%
filter(str_detect(State, "Idaho"))
## subset of data
#sample_data <- df[c(1:1000),]
sample_data <- idaho
saveRDS(sample_data, "../data/sample_data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
server = function(input, output, session){
data = reactive({
x = df
})
## rendering the map widget created in the ui.R file
output$mymap = renderLeaflet({
## piping some functions together
## reactive dataframe assigned to local object, df and passed to leaflet
m = leaflet(data = df) %>%  ## creating map
addTiles() %>%  ## adding open street map widgets
setView(map = addTiles(), lng=-114.4701, lat=42.5558, zoom = 10)  ##Twin Falls Yalls
##Shiny magic- adding pop-up info from df and specific lat/lons
addMarkers(lng = ~routes.longitude, lat = ~routes.latitude,
popup = paste("Route Name: ", df$routes.name, "<br>", ## "<br>" is \n i think
"Grade: ", df$routes.rating, "<br>",
"Type: ", df$routes.type, "<br>",
"Pitches :", df$routes.pitches, "<br>",
"Wall: ", df$Wall, "<br>",
"Crag: ", df$Crag, "<br>",
"Area: ", df$Area, "<br>",
"State/Province: ", df$State))
#setView(lng=-114.4701, lat=42.5558, zoom = 10)  ##Twin Falls Yalls
m
})
}
runApp()
runApp()
runApp()
runApp()
